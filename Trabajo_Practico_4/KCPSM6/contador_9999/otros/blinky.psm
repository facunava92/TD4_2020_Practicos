;=========================================================
; Blinky  
;=========================================================
;Program operation:
;  - toggle leds after 0.5 ms

;=========================================================
; Dataconstant
;=========================================================
constant TOG_MASK, FF  ;	mask=1111_1111

;=========================================================
; Register alias
;=========================================================
;commonly used local variables
namereg s0, data		; reg for temporary data
namereg s1, x0			; least significant byte of x
namereg s2, x1			; middle byte of x
namereg s3, x2			; most significant byte of x
namereg s4, max_value	; max value to compare with
namereg s5, value		; value to compare with

;=========================================================
; Port alias
;=========================================================
;------------input port definitions---------------------
constant sw_port, 00		;8-bit switches
;------------output port definitions---------------------
constant led_port_lsb, 00 
constant led_port_msb, 01 

;=========================================================
; Main program
;=========================================================
;Calling hierarchy:
;
;main
;	- clr_data_mem
;	- toggle_led
;	- delay
;
	
	call clr_data_mem
forever: 
	call toggle_led 
	call delay_250ms 
	jump forever

;=========================================================
;routine: clr_data_mem
;  function: clear data ram
;  temp register: data 
;=========================================================
clr_data_mem:
	load data, 00
	load value, 00
	return

;=========================================================
;routine: read switch
;  function: obatin the max value for the counter
;  input register: sw_in
;  temp register: data
;=========================================================
read_switch:
	input data, sw_port    ;read switch input
	load max_value, data
	return

;=========================================================
;routine: counter_up
;  function: increment "value" register until it 
;			 reaches "max_value"
;  temp register: 
;=========================================================
counter_up:
	compare value, max_value
	jump nz, clear
	add value, 01	; incremetn: {value} + 1
	return
clear:
	load value, 00
	return

;=========================================================
;routine: toggle_led
;	funtion: change the state of the leds
;	output register: led_port_lsb
;	tmp register: value
;=========================================================
toggle_led:
	xor value, TOG_MASK
	output value, led_port_lsb
	output value, led_port_msb
	return

;=========================================================
;routine: output_led
;	funtion: assing the output of leds
;	output register: led_port_lsb
;	tmp register: value
;=========================================================
output_led:
	output value, led_port_lsb
	return

;=========================================================
;routine: delay_XXXs
;	funtion: XXs delay
;	tmp register: s0, s1, s2
;
;=========================================================
delay_500ms:		; 500ms is 5,000,000 x 100ns (5,000,000 = 4C4B40 hex)
	load x2, 4c
	load x1, 4b
	load x0, 40
	jump software_delay

delay_250ms:		; 250ms is 2,500,000 x 100ns (2,500,000 = 2625A0 hex)
	load x2, 26
	load x1, 25
	load x0, a0
	jump software_delay

;
;	The delay loop decrements [s2,s1,s0] until reaches zero
;	Each decrement cycle is 5 instructions which is 10 clock cycles 
;	[2 clock cycles per instrutions] (100 ns at 100Mhz)
;
software_delay:
	load x0, x0
; decrement: {s2,s1,s0} - 1
	sub	x0, 01
	subcy x1, 00
	subcy x2, 00
	jump nz, software_delay
	return
