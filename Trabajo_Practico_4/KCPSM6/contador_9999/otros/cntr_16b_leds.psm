;=========================================================
; Counter_up, output with leds and sseg  
;=========================================================
;Program operation:
;  - The max value is set up with the switches, the 
;    result of the count is shown in the leds and sseg
;
;=========================================================
; Dataconstant
;=========================================================


;=========================================================
; Register alias
;=========================================================
;commonly used local variables
namereg s0, data_lsb		; reg for temporary data
namereg s1, data_msb		; reg for temporary data
namereg s2, x0			; least significant byte of x
namereg s3, x1			; middle byte of x
namereg s4, x2			; most significant byte of x
namereg s5, max_value_lsb	; max value lsb to compare with
namereg s6, max_value_msb	; max value msb to compare with
namereg s7, value_lsb		; value lsb to compare with
namereg s8, value_msb		; value msb to compare with
namereg s9, max_cnt_msb		;
namereg sa, max_cnt_lsb		;

;=========================================================
; Port alias
;=========================================================
;------------input port definitions---------------------
constant sw_port_lsb, 00	;8-bit switches lsb
constant sw_port_msb, 01	;8-bit switches msb
;------------output port definitions---------------------
constant led_port_lsb, 00 
constant led_port_msb, 01 

;=========================================================
; Main program
;=========================================================
;Calling hierarchy:
;
;main
;	- clr_data_mem
;	- counter_up
;	- delay
;	- output_led
;	- delay
	
	call clr_data_mem
forever: 
	call read_switch
	call counter_up
	call output_led
	call delay_50ms 
	jump forever

;=========================================================
;routine: clr_data_mem
;  function: clear data ram
;  temp register: data 
;=========================================================
clr_data_mem:
	load data_lsb, 00
	load data_msb, 00
	load value_lsb, 00
	load value_msb, 00
	load max_cnt_msb, 27
	load max_cnt_lsb, 0F
	return

;=========================================================
;routine: read switch
;  function: obatin the max value for the counter
;  input register: sw_in
;  temp register: data
;=========================================================
read_switch:
	input data_lsb, sw_port_lsb    ;read switch input
	input data_msb, sw_port_msb    ;read switch input	
	load max_value_lsb, data_lsb
	load max_value_msb, data_msb	
	return

;=========================================================
;routine: counter_up
;  function: increment "value" register until it 
;			 reaches "max_value"
;  temp register: 
;=========================================================
counter_up:

	compare max_value_msb, 00
	jump z, lsb
	compare max_cnt_msb, max_value_msb
	jump c, clear_msb
	jump z, error
no_error:
	compare max_value_msb, value_msb
	jump c, clear_msb
	jump z, lsb_
keep:
	add value_lsb, 01	; incremetn: {value_lsb} + 1
	addcy value_msb, 00	; incremetn: {value_msb} + carry
	return
error:
	compare max_cnt_lsb, max_value_lsb
	jump c, clear_msb
	jump nc, no_error
lsb_:
	compare max_value_lsb, value_lsb
	jump z, clear_msb
	jump c, clear_msb
	jump nc, keep
lsb:
	compare max_value_lsb, value_lsb
	jump c, clear_lsb
	jump z, clear_lsb
	add value_lsb, 01	; incremetn: {value_lsb} + 1
	return
clear_msb:
	load value_msb, 00
clear_lsb:
	load value_lsb, 00
	return


;=========================================================
;routine: output_led
;	funtion: assing the output of leds
;	output register: led_port_lsb
;	tmp register: value
;=========================================================
output_led:
	output value_lsb, led_port_lsb
	output value_msb, led_port_msb
	return

;=========================================================
;routine: delay_XXXs
;	funtion: XXs delay
;	tmp register: s0, s1, s2
;
;=========================================================
delay_500ms:		; 500ms is 5,000,000 x 100ns (5,000,000 = 4C4B40 hex)
	load x2, 4c
	load x1, 4b
	load x0, 40
	jump software_delay

delay_250ms:		; 250ms is 2,500,000 x 100ns (2,500,000 = 2625A0 hex)
	load x2, 26
	load x1, 25
	load x0, a0
	jump software_delay

delay_100ms:		; 100ms is 1,000,000 x 100ns (1,000,000 = 0F4240 hex)
	load x2, 0f
	load x1, 42
	load x0, 40
	jump software_delay

delay_50ms:		; 100ms is 500,000 x 100ns (500,000 = 07A120 hex)
	load x2, 07
	load x1, A1
	load x0, 20
	jump software_delay

;
;	The delay loop decrements [s2,s1,s0] until reaches zero
;	Each decrement cycle is 5 instructions which is 10 clock cycles 
;	[2 clock cycles per instrutions] (100 ns at 100Mhz)
;
software_delay:
	load x0, x0
; decrement: {s2,s1,s0} - 1
	sub	x0, 01
	subcy x1, 00
	subcy x2, 00
	jump nz, software_delay
	return
