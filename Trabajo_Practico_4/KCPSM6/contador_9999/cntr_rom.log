KCPSM6 Assembler log file for program 'Z:\run\media\fnavarro\DATA\Git\6to\Tecnicas_Digitales_IV\Practicos\Trabajo_Practico_4\KCPSM6\contador_9999\cntr_rom.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 30 May 2020
Assembly timestamp: 21:56:11

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 0C2 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 195
Memory locations available: 3901


Assembly listing

 Addr Code                   Instruction

 000                         ;=========================================================
 000                         ; Counter_up, output with leds and sseg
 000                         ;=========================================================
 000                         ;Program operation:
 000                         ;  - counter up to 9999, the sw establish the max_value,
 000                         ;    if the value is higher than 9999 the output is 0000
 000                         ; with the addition of reset and stop switches.
 000                         ;=========================================================
 000                         ; Register alias
 000                         ;=========================================================
 000                         ;commonly used local variables
 000                         NAMEREG s0, data_lsb                     ; reg for temporary data
 000                         NAMEREG s1, data_msb                     ; reg for temporary data
 000                         NAMEREG s2, x0                           ; least significant byte of x
 000                         NAMEREG s3, x1                           ; middle byte of x
 000                         NAMEREG s4, x2                           ; most significant byte of x
 000                         NAMEREG s5, max_value_lsb                ; max value lsb to compare with
 000                         NAMEREG s6, max_value_msb                ; max value msb to compare with
 000                         NAMEREG s7, value_lsb                    ; value lsb to compare with
 000                         NAMEREG s8, value_msb                    ; value msb to compare with
 000                         NAMEREG s9, stop_sw                      ;
 000                         NAMEREG sA, reset_bttn                   ;
 000                         NAMEREG sB, led0
 000                         NAMEREG sC, led1
 000                         NAMEREG sD, led2
 000                         NAMEREG sE, led3
 000                         NAMEREG sF, data
 000                         ;=========================================================
 000                         ; Port alias
 000                         ;=========================================================
 000                         ;------------input port definitions---------------------
 000                         CONSTANT sw_port_lsb, 00                 ;8-bit switches lsb
 000                         CONSTANT sw_port_msb, 01                 ;8-bit switches msb
 000                         CONSTANT stop_port, 02
 000                         CONSTANT reset_port, 03
 000                         ;------------output port definitions---------------------
 000                         CONSTANT led_port_lsb, 00
 000                         CONSTANT led_port_msb, 01
 000                         CONSTANT sseg0_port, 02                  ;7-seg led 0
 000                         CONSTANT sseg1_port, 03                  ;7-seg led 1
 000                         CONSTANT sseg2_port, 04                  ;7-seg led 2
 000                         CONSTANT sseg3_port, 05                  ;7-seg led 3
 000                         ;=========================================================
 000                         ; Main program
 000                         ;=========================================================
 000                         ;Calling hierarchy:
 000                         ;
 000                         ;main
 000                         ; - clr_data_mem
 000                         ; - read_switch
 000                         ; - reset?
 000                         ; - stop?
 000                         ; - sseg_up
 000                         ; - counter_up
 000                         ; - delay
 000                         ; - output_led
 000                         ;  -hex_to_led
 000                         ; - delay
 000  20012                  CALL 012[clr_data_mem]
 001                forever: 
 001  20058                  CALL 058[output_led]
 002  2001D                  CALL 01D[read_switch]
 003  1D901                  COMPARE s9[stop_sw], 01
 004  32008                  JUMP Z, 008[continue]
 005  20043                  CALL 043[sseg_up]
 006  20024                  CALL 024[counter_up]
 007  2006B                  CALL 06B[delay_250ms]
 008               continue: 
 008  1DA01                  COMPARE sA[reset_bttn], 01
 009  3200B                  JUMP Z, 00B[clear]
 00A  22001                  JUMP 001[forever]
 00B                  clear: 
 00B  01800                  LOAD s8[value_msb], 00
 00C  01700                  LOAD s7[value_lsb], 00
 00D  01B00                  LOAD sB[led0], 00
 00E  01C00                  LOAD sC[led1], 00
 00F  01D00                  LOAD sD[led2], 00
 010  01E00                  LOAD sE[led3], 00
 011  22001                  JUMP 001[forever]
 012                         ;=========================================================
 012                         ;routine: clr_data_mem
 012                         ;  function: clear data ram
 012                         ;  temp register: data
 012                         ;=========================================================
 012           clr_data_mem: 
 012  01900                  LOAD s9[stop_sw], 00
 013  01A00                  LOAD sA[reset_bttn], 00
 014  01000                  LOAD s0[data_lsb], 00
 015  01100                  LOAD s1[data_msb], 00
 016  01700                  LOAD s7[value_lsb], 00
 017  01800                  LOAD s8[value_msb], 00
 018  01B00                  LOAD sB[led0], 00
 019  01C00                  LOAD sC[led1], 00
 01A  01D00                  LOAD sD[led2], 00
 01B  01E00                  LOAD sE[led3], 00
 01C  25000                  RETURN 
 01D                         ;=========================================================
 01D                         ;routine: read switch
 01D                         ;  function: obatin the max value for the counter
 01D                         ;  input register: sw_in
 01D                         ;  temp register: data
 01D                         ;=========================================================
 01D            read_switch: 
 01D  09902                  INPUT s9[stop_sw], 02[stop_port]
 01E  09A03                  INPUT sA[reset_bttn], 03[reset_port]
 01F  09000                  INPUT s0[data_lsb], 00[sw_port_lsb]      ;read switch input
 020  09101                  INPUT s1[data_msb], 01[sw_port_msb]      ;read switch input
 021  00500                  LOAD s5[max_value_lsb], s0[data_lsb]
 022  00610                  LOAD s6[max_value_msb], s1[data_msb]
 023  25000                  RETURN 
 024                         ;=========================================================
 024                         ;routine: counter_up
 024                         ;  function: increment "value" register until it
 024                         ;    reaches "max_value"
 024                         ;  temp register:
 024                         ;=========================================================
 024             counter_up: 
 024  1D600                  COMPARE s6[max_value_msb], 00
 025  32037                  JUMP Z, 037[lsb]
 026  1D628                  COMPARE s6[max_value_msb], 28
 027  3E03C                  JUMP NC, 03C[clear_msb]
 028  1D627                  COMPARE s6[max_value_msb], 27
 029  3E030                  JUMP NC, 030[error]
 02A               no_error: 
 02A  1C680                  COMPARE s6[max_value_msb], s8[value_msb]
 02B  3A03C                  JUMP C, 03C[clear_msb]
 02C  32033                  JUMP Z, 033[lsb_]
 02D                   keep: 
 02D  11701                  ADD s7[value_lsb], 01                    ; incremetn: {value_lsb} + 1
 02E  13800                  ADDCY s8[value_msb], 00                  ; incremetn: {value_msb} + carry
 02F  25000                  RETURN 
 030                  error: 
 030  1D510                  COMPARE s5[max_value_lsb], 10
 031  3E03C                  JUMP NC, 03C[clear_msb]
 032  3A02A                  JUMP C, 02A[no_error]
 033                   lsb_: 
 033  1C570                  COMPARE s5[max_value_lsb], s7[value_lsb]
 034  3203C                  JUMP Z, 03C[clear_msb]
 035  3A03C                  JUMP C, 03C[clear_msb]
 036  3E02D                  JUMP NC, 02D[keep]
 037                    lsb: 
 037  1C570                  COMPARE s5[max_value_lsb], s7[value_lsb]
 038  3A03D                  JUMP C, 03D[clear_lsb]
 039  3203D                  JUMP Z, 03D[clear_lsb]
 03A  11701                  ADD s7[value_lsb], 01                    ; incremetn: {value_lsb} + 1
 03B  25000                  RETURN 
 03C              clear_msb: 
 03C  01800                  LOAD s8[value_msb], 00
 03D              clear_lsb: 
 03D  01700                  LOAD s7[value_lsb], 00
 03E  01B00                  LOAD sB[led0], 00
 03F  01C00                  LOAD sC[led1], 00
 040  01D00                  LOAD sD[led2], 00
 041  01E00                  LOAD sE[led3], 00
 042  25000                  RETURN 
 043                         ;=========================================================
 043                         ;routine: sseg_up
 043                         ;  function: increment "value" register until it
 043                         ;    reaches "max_value"
 043                         ;  temp register:
 043                         ;=========================================================
 043                sseg_up: 
 043  11B01                  ADD sB[led0], 01                         ; incremetn: {led0} + 1
 044  1DB0A                  COMPARE sB[led0], 0A
 045  3E047                  JUMP NC, 047[led1_up]
 046  36057                  JUMP NZ, 057[done]
 047                led1_up: 
 047  01B00                  LOAD sB[led0], 00
 048  11C01                  ADD sC[led1], 01                         ; incremetn: {led1} + 1
 049  1DC0A                  COMPARE sC[led1], 0A
 04A  3E04C                  JUMP NC, 04C[led2_up]
 04B  36057                  JUMP NZ, 057[done]
 04C                led2_up: 
 04C  01C00                  LOAD sC[led1], 00
 04D  11D01                  ADD sD[led2], 01                         ; incremetn: {led2} + 1
 04E  1DD0A                  COMPARE sD[led2], 0A
 04F  3E051                  JUMP NC, 051[led3_up]
 050  36057                  JUMP NZ, 057[done]
 051                led3_up: 
 051  01D00                  LOAD sD[led2], 00
 052  11E01                  ADD sE[led3], 01                         ; incremetn: {led3} + 1
 053  1DD0A                  COMPARE sD[led2], 0A
 054  3E056                  JUMP NC, 056[led4_up]
 055  36057                  JUMP NZ, 057[done]
 056                led4_up: 
 056  01E00                  LOAD sE[led3], 00
 057                   done: 
 057  25000                  RETURN 
 058                         ;=========================================================
 058                         ;routine: output_led
 058                         ; funtion: assing the output of leds
 058                         ; output register: led_port_lsb
 058                         ; tmp register: value
 058                         ;=========================================================
 058             output_led: 
 058  2D700                  OUTPUT s7[value_lsb], 00[led_port_lsb]
 059  2D801                  OUTPUT s8[value_msb], 01[led_port_msb]
 05A  00FB0                  LOAD sF[data], sB[led0]
 05B  20085                  CALL 085[hex_to_led]
 05C  2DF02                  OUTPUT sF[data], 02[sseg0_port]
 05D  00FC0                  LOAD sF[data], sC[led1]
 05E  20085                  CALL 085[hex_to_led]
 05F  2DF03                  OUTPUT sF[data], 03[sseg1_port]
 060  00FD0                  LOAD sF[data], sD[led2]
 061  20085                  CALL 085[hex_to_led]
 062  2DF04                  OUTPUT sF[data], 04[sseg2_port]
 063  00FE0                  LOAD sF[data], sE[led3]
 064  20085                  CALL 085[hex_to_led]
 065  2DF05                  OUTPUT sF[data], 05[sseg3_port]
 066  25000                  RETURN 
 067                         ;=========================================================
 067                         ;routine: delay_XXXs
 067                         ; funtion: XXs delay
 067                         ; tmp register: s0, s1, s2
 067                         ;
 067                         ;=========================================================
 067            delay_500ms: ; 500ms is 5,000,000 x 100ns (5,000,000 = 4C4B40 hex)
 067  0144C                  LOAD s4[x2], 4C
 068  0134B                  LOAD s3[x1], 4B
 069  01240                  LOAD s2[x0], 40
 06A  2207F                  JUMP 07F[software_delay]
 06B            delay_250ms: ; 250ms is 2,500,000 x 100ns (2,500,000 = 2625A0 hex)
 06B  01426                  LOAD s4[x2], 26
 06C  01325                  LOAD s3[x1], 25
 06D  012A0                  LOAD s2[x0], A0
 06E  2207F                  JUMP 07F[software_delay]
 06F            delay_100ms: ; 100ms is 1,000,000 x 100ns (1,000,000 = 0F4240 hex)
 06F  0140F                  LOAD s4[x2], 0F
 070  01342                  LOAD s3[x1], 42
 071  01240                  LOAD s2[x0], 40
 072  2207F                  JUMP 07F[software_delay]
 073             delay_50ms: ; 100ms is 500,000 x 100ns (500,000 = 07A120 hex)
 073  01407                  LOAD s4[x2], 07
 074  013A1                  LOAD s3[x1], A1
 075  01220                  LOAD s2[x0], 20
 076  2207F                  JUMP 07F[software_delay]
 077             delay_20ms: ; 100ms is 200,000 x 100ns (200,000 = 030D40 hex)
 077  01403                  LOAD s4[x2], 03
 078  0130D                  LOAD s3[x1], 0D
 079  01240                  LOAD s2[x0], 40
 07A  2207F                  JUMP 07F[software_delay]
 07B             delay_10ms: ; 100ms is 100,000 x 100ns (100,000 = 0186A0 hex)
 07B  01401                  LOAD s4[x2], 01
 07C  01386                  LOAD s3[x1], 86
 07D  012A0                  LOAD s2[x0], A0
 07E  2207F                  JUMP 07F[software_delay]
 07F                         ;
 07F                         ; The delay loop decrements [s2,s1,s0] until reaches zero
 07F                         ; Each decrement cycle is 5 instructions which is 10 clock cycles
 07F                         ; [2 clock cycles per instrutions] (100 ns at 100Mhz)
 07F                         ;
 07F         software_delay: 
 07F  00220                  LOAD s2[x0], s2[x0]
 080                         ; decrement: {s2,s1,s0} - 1
 080  19201                  SUB s2[x0], 01
 081  1B300                  SUBCY s3[x1], 00
 082  1B400                  SUBCY s4[x2], 00
 083  3607F                  JUMP NZ, 07F[software_delay]
 084  25000                  RETURN 
 085                         ;=========================================================
 085                         ;routine: hex_to_led
 085                         ;  function: convert a hex digit to 7-seg led pattern
 085                         ;  input register: data
 085                         ;  output register: data
 085                         ;=========================================================
 085             hex_to_led: 
 085  1DF00                  COMPARE sF[data], 00
 086  36089                  JUMP NZ, 089[comp_hex_1]
 087  01FC0                  LOAD sF[data], C0                        ;7seg pattern 0
 088  220C2                  JUMP 0C2[hex_done]
 089             comp_hex_1: 
 089  1DF01                  COMPARE sF[data], 01
 08A  3608D                  JUMP NZ, 08D[comp_hex_2]
 08B  01FF9                  LOAD sF[data], F9                        ;7seg pattern 1
 08C  220C2                  JUMP 0C2[hex_done]
 08D             comp_hex_2: 
 08D  1DF02                  COMPARE sF[data], 02
 08E  36091                  JUMP NZ, 091[comp_hex_3]
 08F  01FA4                  LOAD sF[data], A4                        ;7seg pattern 2
 090  220C2                  JUMP 0C2[hex_done]
 091             comp_hex_3: 
 091  1DF03                  COMPARE sF[data], 03
 092  36095                  JUMP NZ, 095[comp_hex_4]
 093  01FB0                  LOAD sF[data], B0                        ;7seg pattern 3
 094  220C2                  JUMP 0C2[hex_done]
 095             comp_hex_4: 
 095  1DF04                  COMPARE sF[data], 04
 096  36099                  JUMP NZ, 099[comp_hex_5]
 097  01F99                  LOAD sF[data], 99                        ;7seg pattern 4
 098  220C2                  JUMP 0C2[hex_done]
 099             comp_hex_5: 
 099  1DF05                  COMPARE sF[data], 05
 09A  3609D                  JUMP NZ, 09D[comp_hex_6]
 09B  01F92                  LOAD sF[data], 92                        ;7seg pattern 5
 09C  220C2                  JUMP 0C2[hex_done]
 09D             comp_hex_6: 
 09D  1DF06                  COMPARE sF[data], 06
 09E  360A1                  JUMP NZ, 0A1[comp_hex_7]
 09F  01F82                  LOAD sF[data], 82                        ;7seg pattern 6
 0A0  220C2                  JUMP 0C2[hex_done]
 0A1             comp_hex_7: 
 0A1  1DF07                  COMPARE sF[data], 07
 0A2  360A5                  JUMP NZ, 0A5[comp_hex_8]
 0A3  01FF8                  LOAD sF[data], F8                        ;7seg pattern 7
 0A4  220C2                  JUMP 0C2[hex_done]
 0A5             comp_hex_8: 
 0A5  1DF08                  COMPARE sF[data], 08
 0A6  360A9                  JUMP NZ, 0A9[comp_hex_9]
 0A7  01F80                  LOAD sF[data], 80                        ;7seg pattern 8
 0A8  220C2                  JUMP 0C2[hex_done]
 0A9             comp_hex_9: 
 0A9  1DF09                  COMPARE sF[data], 09
 0AA  360AD                  JUMP NZ, 0AD[comp_hex_a]
 0AB  01F98                  LOAD sF[data], 98                        ;7seg pattern 9
 0AC  220C2                  JUMP 0C2[hex_done]
 0AD             comp_hex_a: 
 0AD  1DF0A                  COMPARE sF[data], 0A
 0AE  360B1                  JUMP NZ, 0B1[comp_hex_b]
 0AF  01FA0                  LOAD sF[data], A0                        ;7seg pattern a
 0B0  220C2                  JUMP 0C2[hex_done]
 0B1             comp_hex_b: 
 0B1  1DF0B                  COMPARE sF[data], 0B
 0B2  360B5                  JUMP NZ, 0B5[comp_hex_c]
 0B3  01F83                  LOAD sF[data], 83                        ;7seg pattern b
 0B4  220C2                  JUMP 0C2[hex_done]
 0B5             comp_hex_c: 
 0B5  1DF0C                  COMPARE sF[data], 0C
 0B6  360B9                  JUMP NZ, 0B9[comp_hex_d]
 0B7  01FA7                  LOAD sF[data], A7                        ;7seg pattern C
 0B8  220C2                  JUMP 0C2[hex_done]
 0B9             comp_hex_d: 
 0B9  1DF0D                  COMPARE sF[data], 0D
 0BA  360BD                  JUMP NZ, 0BD[comp_hex_e]
 0BB  01FA1                  LOAD sF[data], A1                        ;7seg pattern d
 0BC  220C2                  JUMP 0C2[hex_done]
 0BD             comp_hex_e: 
 0BD  1DF0E                  COMPARE sF[data], 0E
 0BE  360C1                  JUMP NZ, 0C1[comp_hex_f]
 0BF  01F84                  LOAD sF[data], 84                        ;7seg pattern E
 0C0  220C2                  JUMP 0C2[hex_done]
 0C1             comp_hex_f: 
 0C1  01F8E                  LOAD sF[data], 8E                        ;7seg pattern f
 0C2               hex_done: 
 0C2  25000                  RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\run\media\fnavarro\DATA\Git\6to\Tecnicas_Digitales_IV\Practicos\Trabajo_Practico_4\KCPSM6\contador_9999\cntr_rom.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   21'd         
 timestamp_minutes 56'd         
 timestamp_seconds 11'd         
 datestamp_year    20'd         
 datestamp_month   5'd          
 datestamp_day     30'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 sw_port_lsb       00           cntr_rom.psm
 sw_port_msb       01           cntr_rom.psm
 stop_port         02           cntr_rom.psm
 reset_port        03           cntr_rom.psm
 led_port_lsb      00           cntr_rom.psm
 led_port_msb      01           cntr_rom.psm
 sseg0_port        02           cntr_rom.psm
 sseg1_port        03           cntr_rom.psm
 sseg2_port        04           cntr_rom.psm
 sseg3_port        05           cntr_rom.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "30 May 2020"  
 timestamp$        "21:56:11"     



List of line labels

   Label            Addr  Source PSM File

   forever          001   cntr_rom.psm
   continue         008   cntr_rom.psm
   clear            00B   cntr_rom.psm
   clr_data_mem     012   cntr_rom.psm
   read_switch      01D   cntr_rom.psm
   counter_up       024   cntr_rom.psm
   no_error         02A   cntr_rom.psm
   keep             02D   cntr_rom.psm
   error            030   cntr_rom.psm
   lsb_             033   cntr_rom.psm
   lsb              037   cntr_rom.psm
   clear_msb        03C   cntr_rom.psm
   clear_lsb        03D   cntr_rom.psm
   sseg_up          043   cntr_rom.psm
   led1_up          047   cntr_rom.psm
   led2_up          04C   cntr_rom.psm
   led3_up          051   cntr_rom.psm
   led4_up          056   cntr_rom.psm
   done             057   cntr_rom.psm
   output_led       058   cntr_rom.psm
 * delay_500ms      067   cntr_rom.psm
   delay_250ms      06B   cntr_rom.psm
 * delay_100ms      06F   cntr_rom.psm
 * delay_50ms       073   cntr_rom.psm
 * delay_20ms       077   cntr_rom.psm
 * delay_10ms       07B   cntr_rom.psm
   software_delay   07F   cntr_rom.psm
   hex_to_led       085   cntr_rom.psm
   comp_hex_1       089   cntr_rom.psm
   comp_hex_2       08D   cntr_rom.psm
   comp_hex_3       091   cntr_rom.psm
   comp_hex_4       095   cntr_rom.psm
   comp_hex_5       099   cntr_rom.psm
   comp_hex_6       09D   cntr_rom.psm
   comp_hex_7       0A1   cntr_rom.psm
   comp_hex_8       0A5   cntr_rom.psm
   comp_hex_9       0A9   cntr_rom.psm
   comp_hex_a       0AD   cntr_rom.psm
   comp_hex_b       0B1   cntr_rom.psm
   comp_hex_c       0B5   cntr_rom.psm
   comp_hex_d       0B9   cntr_rom.psm
   comp_hex_e       0BD   cntr_rom.psm
   comp_hex_f       0C1   cntr_rom.psm
   hex_done         0C2   cntr_rom.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             67
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               6
 ADDCY             1
 SUB               1
 SUBCY             2

 TEST              -
 TESTCY            -
 COMPARE          28
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             4
 OUTPUT            6
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             61
 JUMP@             -
 CALL             10
 CALL@             -
 RETURN            9
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
