;=========================================================
; Counter_up, output with leds and sseg  
;=========================================================
;Program operation:
;  - counter up to 9999, the sw establish the max_value,
;    if the value is higher than 9999 the output is 0000
;	with the addition of reset and stop switches.

;=========================================================
; Register alias
;=========================================================
;commonly used local variables
namereg s0, data_lsb		; reg for temporary data
namereg s1, data_msb		; reg for temporary data
namereg s2, x0				; least significant byte of x
namereg s3, x1				; middle byte of x
namereg s4, x2				; most significant byte of x
namereg s5, max_value_lsb	; max value lsb to compare with
namereg s6, max_value_msb	; max value msb to compare with
namereg s7, value_lsb		; value lsb to compare with
namereg s8, value_msb		; value msb to compare with
namereg s9, stop_sw			;
namereg sa, reset_bttn		;
namereg sb, led0
namereg sc, led1
namereg sd, led2
namereg se, led3
namereg sf, data

;=========================================================
; Port alias
;=========================================================
;------------input port definitions---------------------
constant sw_port_lsb, 00	;8-bit switches lsb
constant sw_port_msb, 01	;8-bit switches msb
constant stop_port, 02
constant reset_port, 03
;------------output port definitions---------------------
constant led_port_lsb, 00 
constant led_port_msb, 01
constant sseg0_port, 02    ;7-seg led 0
constant sseg1_port, 03    ;7-seg led 1
constant sseg2_port, 04    ;7-seg led 2
constant sseg3_port, 05    ;7-seg led 3

;=========================================================
; Main program
;=========================================================
;Calling hierarchy:
;
;main
;	- clr_data_mem
;	- read_switch
;	- reset?
;	- stop?
;	- sseg_up
;	- counter_up
;	- delay
;	- output_led
;		-hex_to_led
;	- delay
	
	call clr_data_mem
forever: 
	call output_led
	call read_switch
	compare stop_sw, 01
	jump z, continue
	call sseg_up
	call counter_up
	call delay_250ms
continue:
	compare reset_bttn, 01
	jump z, clear
	jump forever

clear:
	load value_msb, 00
	load value_lsb, 00
	load led0, 00
	load led1, 00
	load led2, 00
	load led3, 00
	jump forever

;=========================================================
;routine: clr_data_mem
;  function: clear data ram
;  temp register: data 
;=========================================================
clr_data_mem:
	load stop_sw, 00
	load reset_bttn, 00
	load data_lsb, 00
	load data_msb, 00
	load value_lsb, 00
	load value_msb, 00
	load led0, 00
	load led1, 00
	load led2, 00
	load led3, 00
	return

;=========================================================
;routine: read switch
;  function: obatin the max value for the counter
;  input register: sw_in
;  temp register: data
;=========================================================
read_switch:
	input stop_sw, stop_port
	input reset_bttn, reset_port
	input data_lsb, sw_port_lsb    ;read switch input
	input data_msb, sw_port_msb    ;read switch input	
	load max_value_lsb, data_lsb
	load max_value_msb, data_msb	
	return

;=========================================================
;routine: counter_up
;  function: increment "value" register until it 
;			 reaches "max_value"
;  temp register: 
;=========================================================
counter_up:

	compare max_value_msb, 00
	jump z, lsb
	compare max_value_msb, 28
	jump nc, clear_msb
	compare max_value_msb, 27
	jump nc, error
no_error:
	compare max_value_msb, value_msb
	jump c, clear_msb
	jump z, lsb_
keep:
	add value_lsb, 01	; incremetn: {value_lsb} + 1
	addcy value_msb, 00	; incremetn: {value_msb} + carry
	return
error:
	compare max_value_lsb, 10
	jump nc, clear_msb
	jump c, no_error
lsb_:
	compare max_value_lsb, value_lsb
	jump z, clear_msb
	jump c, clear_msb
	jump nc, keep
lsb:
	compare max_value_lsb, value_lsb
	jump c, clear_lsb
	jump z, clear_lsb
	add value_lsb, 01	; incremetn: {value_lsb} + 1
	return
clear_msb:
	load value_msb, 00
clear_lsb:
	load value_lsb, 00
	load led0, 00
	load led1, 00
	load led2, 00
	load led3, 00
	return

;=========================================================
;routine: sseg_up
;  function: increment "value" register until it 
;			 reaches "max_value"
;  temp register: 
;=========================================================
sseg_up:
	add led0, 01	; incremetn: {led0} + 1
	compare led0, 0a
	jump nc, led1_up
	jump nz, done

led1_up:
	load led0, 00
	add led1, 01	; incremetn: {led1} + 1
	compare led1, 0a
	jump nc, led2_up
	jump nz, done

led2_up:
	load led1, 00
	add led2, 01	; incremetn: {led2} + 1
	compare led2, 0a
	jump nc, led3_up
	jump nz, done

led3_up:
	load led2, 00
	add led3, 01	; incremetn: {led3} + 1
	compare led2, 0a
	jump nc, led4_up
	jump nz, done

led4_up:
	load led3, 00

done:	
	return

;=========================================================
;routine: output_led
;	funtion: assing the output of leds
;	output register: led_port_lsb
;	tmp register: value
;=========================================================
output_led:
	output value_lsb, led_port_lsb
	output value_msb, led_port_msb
	
	load data, led0
	call hex_to_led
	output data, sseg0_port

	load data, led1
	call hex_to_led
	output data, sseg1_port

	load data, led2
	call hex_to_led	
	output data, sseg2_port

	load data, led3
	call hex_to_led	
	output data, sseg3_port

	return

;=========================================================
;routine: delay_XXXs
;	funtion: XXs delay
;	tmp register: s0, s1, s2
;
;=========================================================
delay_500ms:		; 500ms is 5,000,000 x 100ns (5,000,000 = 4C4B40 hex)
	load x2, 4c
	load x1, 4b
	load x0, 40
	jump software_delay

delay_250ms:		; 250ms is 2,500,000 x 100ns (2,500,000 = 2625A0 hex)
	load x2, 26
	load x1, 25
	load x0, a0
	jump software_delay

delay_100ms:		; 100ms is 1,000,000 x 100ns (1,000,000 = 0F4240 hex)
	load x2, 0f
	load x1, 42
	load x0, 40
	jump software_delay

delay_50ms:		; 100ms is 500,000 x 100ns (500,000 = 07A120 hex)
	load x2, 07
	load x1, A1
	load x0, 20
	jump software_delay

delay_20ms:		; 100ms is 200,000 x 100ns (200,000 = 030D40 hex)
	load x2, 03
	load x1, 0D
	load x0, 40
	jump software_delay

delay_10ms:		; 100ms is 100,000 x 100ns (100,000 = 0186A0 hex)
	load x2, 01
	load x1, 86
	load x0, A0
	jump software_delay
;
;	The delay loop decrements [s2,s1,s0] until reaches zero
;	Each decrement cycle is 5 instructions which is 10 clock cycles 
;	[2 clock cycles per instrutions] (100 ns at 100Mhz)
;
software_delay:
	load x0, x0
; decrement: {s2,s1,s0} - 1
	sub	x0, 01
	subcy x1, 00
	subcy x2, 00
	jump nz, software_delay
	return

;=========================================================
;routine: hex_to_led
;  function: convert a hex digit to 7-seg led pattern
;  input register: data
;  output register: data
;=========================================================

hex_to_led:                 
	compare data, 00         
	jump nz, comp_hex_1    
   	load data, C0          ;7seg pattern 0
   	jump hex_done          
comp_hex_1:                 
   	compare data, 01         
   	jump nz, comp_hex_2    
   	load data, F9          ;7seg pattern 1
   	jump hex_done          
comp_hex_2:                 
   	compare data, 02         
   	jump nz, comp_hex_3    
   	load data, A4          ;7seg pattern 2
   	jump hex_done          
comp_hex_3:                 
   	compare data, 03         
   	jump nz, comp_hex_4    
   	load data, B0          ;7seg pattern 3
   	jump hex_done          
comp_hex_4:                 
   	compare data, 04         
   	jump nz, comp_hex_5    
   	load data, 99          ;7seg pattern 4
   	jump hex_done          
comp_hex_5:                 
   	compare data, 05         
   	jump nz, comp_hex_6    
   	load data, 92          ;7seg pattern 5
   	jump hex_done          
comp_hex_6:                 
   	compare data, 06         
   	jump nz, comp_hex_7    
   	load data, 82          ;7seg pattern 6
   	jump hex_done          
comp_hex_7:                 
   	compare data, 07         
   	jump nz, comp_hex_8    
   	load data, F8          ;7seg pattern 7
   	jump hex_done          
comp_hex_8:                 
   	compare data, 08         
   	jump nz, comp_hex_9    
   	load data, 80          ;7seg pattern 8
   	jump hex_done          
comp_hex_9:                 
   	compare data, 09         
   	jump nz, comp_hex_a    
   	load data, 98          ;7seg pattern 9
   	jump hex_done          
comp_hex_a:                 
   	compare data, 0A         
   	jump nz, comp_hex_b    
   	load data, A0          ;7seg pattern a
   	jump hex_done          
comp_hex_b:
   	compare data, 0B
   	jump nz, comp_hex_c
   	load data, 83          ;7seg pattern b
   	jump hex_done
comp_hex_c:
   	compare data, 0C
   	jump nz, comp_hex_d
   	load data, A7          ;7seg pattern C
   	jump hex_done
comp_hex_d:
   	compare data, 0D
   	jump nz, comp_hex_e
   	load data, A1          ;7seg pattern d
   	jump hex_done
comp_hex_e:
   	compare data, 0E
   	jump nz, comp_hex_f
   	load data, 84          ;7seg pattern E
   	jump hex_done
comp_hex_f:
   	load data, 8E          ;7seg pattern f
hex_done:
   return
